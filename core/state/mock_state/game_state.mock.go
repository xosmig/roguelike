// Code generated by MockGen. DO NOT EDIT.
// Source: ./game_state.go

// Package mock_state is a generated GoMock package.
package mock_state

import (
	gomock "github.com/golang/mock/gomock"
	character "github.com/xosmig/roguelike/core/character"
	gamemap "github.com/xosmig/roguelike/core/gamemap"
	geom "github.com/xosmig/roguelike/core/geom"
	objects "github.com/xosmig/roguelike/core/objects"
	reflect "reflect"
)

// MockGameState is a mock of GameState interface
type MockGameState struct {
	ctrl     *gomock.Controller
	recorder *MockGameStateMockRecorder
}

// MockGameStateMockRecorder is the mock recorder for MockGameState
type MockGameStateMockRecorder struct {
	mock *MockGameState
}

// NewMockGameState creates a new mock instance
func NewMockGameState(ctrl *gomock.Controller) *MockGameState {
	mock := &MockGameState{ctrl: ctrl}
	mock.recorder = &MockGameStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameState) EXPECT() *MockGameStateMockRecorder {
	return m.recorder
}

// GetMap mocks base method
func (m *MockGameState) GetMap() gamemap.GameMap {
	ret := m.ctrl.Call(m, "GetMap")
	ret0, _ := ret[0].(gamemap.GameMap)
	return ret0
}

// GetMap indicates an expected call of GetMap
func (mr *MockGameStateMockRecorder) GetMap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockGameState)(nil).GetMap))
}

// GetCharacter mocks base method
func (m *MockGameState) GetCharacter() character.Character {
	ret := m.ctrl.Call(m, "GetCharacter")
	ret0, _ := ret[0].(character.Character)
	return ret0
}

// GetCharacter indicates an expected call of GetCharacter
func (mr *MockGameStateMockRecorder) GetCharacter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockGameState)(nil).GetCharacter))
}

// TryMove mocks base method
func (m *MockGameState) TryMove(obj objects.MovableObject, direction geom.Direction) {
	m.ctrl.Call(m, "TryMove", obj, direction)
}

// TryMove indicates an expected call of TryMove
func (mr *MockGameStateMockRecorder) TryMove(obj, direction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryMove", reflect.TypeOf((*MockGameState)(nil).TryMove), obj, direction)
}
