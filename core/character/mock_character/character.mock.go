// Code generated by MockGen. DO NOT EDIT.
// Source: ./character.go

// Package mock_character is a generated GoMock package.
package mock_character

import (
	gomock "github.com/golang/mock/gomock"
	character "github.com/xosmig/roguelike/core/character"
	geom "github.com/xosmig/roguelike/core/geom"
	objects "github.com/xosmig/roguelike/core/objects"
	unit "github.com/xosmig/roguelike/core/unit"
	reflect "reflect"
)

// MockCharacter is a mock of Character interface
type MockCharacter struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterMockRecorder
}

// MockCharacterMockRecorder is the mock recorder for MockCharacter
type MockCharacterMockRecorder struct {
	mock *MockCharacter
}

// NewMockCharacter creates a new mock instance
func NewMockCharacter(ctrl *gomock.Controller) *MockCharacter {
	mock := &MockCharacter{ctrl: ctrl}
	mock.recorder = &MockCharacterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacter) EXPECT() *MockCharacterMockRecorder {
	return m.recorder
}

// Response mocks base method
func (m *MockCharacter) Response(other objects.GameObject) {
	m.ctrl.Call(m, "Response", other)
}

// Response indicates an expected call of Response
func (mr *MockCharacterMockRecorder) Response(other interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockCharacter)(nil).Response), other)
}

// ModelName mocks base method
func (m *MockCharacter) ModelName() string {
	ret := m.ctrl.Call(m, "ModelName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelName indicates an expected call of ModelName
func (mr *MockCharacterMockRecorder) ModelName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelName", reflect.TypeOf((*MockCharacter)(nil).ModelName))
}

// SetPosition mocks base method
func (m *MockCharacter) SetPosition(pos geom.Location) {
	m.ctrl.Call(m, "SetPosition", pos)
}

// SetPosition indicates an expected call of SetPosition
func (mr *MockCharacterMockRecorder) SetPosition(pos interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockCharacter)(nil).SetPosition), pos)
}

// GetPosition mocks base method
func (m *MockCharacter) GetPosition() geom.Location {
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(geom.Location)
	return ret0
}

// GetPosition indicates an expected call of GetPosition
func (mr *MockCharacterMockRecorder) GetPosition() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockCharacter)(nil).GetPosition))
}

// Interact mocks base method
func (m *MockCharacter) Interact(other objects.GameObject) {
	m.ctrl.Call(m, "Interact", other)
}

// Interact indicates an expected call of Interact
func (mr *MockCharacterMockRecorder) Interact(other interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interact", reflect.TypeOf((*MockCharacter)(nil).Interact), other)
}

// RecvDamage mocks base method
func (m *MockCharacter) RecvDamage(dmg int, from unit.Unit) {
	m.ctrl.Call(m, "RecvDamage", dmg, from)
}

// RecvDamage indicates an expected call of RecvDamage
func (mr *MockCharacterMockRecorder) RecvDamage(dmg, from interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvDamage", reflect.TypeOf((*MockCharacter)(nil).RecvDamage), dmg, from)
}

// GetTeam mocks base method
func (m *MockCharacter) GetTeam() int {
	ret := m.ctrl.Call(m, "GetTeam")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTeam indicates an expected call of GetTeam
func (mr *MockCharacterMockRecorder) GetTeam() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockCharacter)(nil).GetTeam))
}

// GetHP mocks base method
func (m *MockCharacter) GetHP() int {
	ret := m.ctrl.Call(m, "GetHP")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetHP indicates an expected call of GetHP
func (mr *MockCharacterMockRecorder) GetHP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHP", reflect.TypeOf((*MockCharacter)(nil).GetHP))
}

// SetHP mocks base method
func (m *MockCharacter) SetHP(hp int) {
	m.ctrl.Call(m, "SetHP", hp)
}

// SetHP indicates an expected call of SetHP
func (mr *MockCharacterMockRecorder) SetHP(hp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHP", reflect.TypeOf((*MockCharacter)(nil).SetHP), hp)
}

// GetMaxHP mocks base method
func (m *MockCharacter) GetMaxHP() int {
	ret := m.ctrl.Call(m, "GetMaxHP")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxHP indicates an expected call of GetMaxHP
func (mr *MockCharacterMockRecorder) GetMaxHP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxHP", reflect.TypeOf((*MockCharacter)(nil).GetMaxHP))
}

// SetMaxHP mocks base method
func (m *MockCharacter) SetMaxHP(hp int) {
	m.ctrl.Call(m, "SetMaxHP", hp)
}

// SetMaxHP indicates an expected call of SetMaxHP
func (mr *MockCharacterMockRecorder) SetMaxHP(hp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxHP", reflect.TypeOf((*MockCharacter)(nil).SetMaxHP), hp)
}

// Wearing mocks base method
func (m *MockCharacter) Wearing() character.Item {
	ret := m.ctrl.Call(m, "Wearing")
	ret0, _ := ret[0].(character.Item)
	return ret0
}

// Wearing indicates an expected call of Wearing
func (mr *MockCharacterMockRecorder) Wearing() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wearing", reflect.TypeOf((*MockCharacter)(nil).Wearing))
}

// WearOrTakeOff mocks base method
func (m *MockCharacter) WearOrTakeOff(idx int) error {
	ret := m.ctrl.Call(m, "WearOrTakeOff", idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WearOrTakeOff indicates an expected call of WearOrTakeOff
func (mr *MockCharacterMockRecorder) WearOrTakeOff(idx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WearOrTakeOff", reflect.TypeOf((*MockCharacter)(nil).WearOrTakeOff), idx)
}

// AddItem mocks base method
func (m *MockCharacter) AddItem(item character.Item) {
	m.ctrl.Call(m, "AddItem", item)
}

// AddItem indicates an expected call of AddItem
func (mr *MockCharacterMockRecorder) AddItem(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockCharacter)(nil).AddItem), item)
}

// Inventory mocks base method
func (m *MockCharacter) Inventory() []character.Item {
	ret := m.ctrl.Call(m, "Inventory")
	ret0, _ := ret[0].([]character.Item)
	return ret0
}

// Inventory indicates an expected call of Inventory
func (mr *MockCharacterMockRecorder) Inventory() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inventory", reflect.TypeOf((*MockCharacter)(nil).Inventory))
}

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// Wear mocks base method
func (m *MockItem) Wear(character character.Character) error {
	ret := m.ctrl.Call(m, "Wear", character)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wear indicates an expected call of Wear
func (mr *MockItemMockRecorder) Wear(character interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wear", reflect.TypeOf((*MockItem)(nil).Wear), character)
}

// TakeOff mocks base method
func (m *MockItem) TakeOff(character character.Character) error {
	ret := m.ctrl.Call(m, "TakeOff", character)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeOff indicates an expected call of TakeOff
func (mr *MockItemMockRecorder) TakeOff(character interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOff", reflect.TypeOf((*MockItem)(nil).TakeOff), character)
}

// IconName mocks base method
func (m *MockItem) IconName() string {
	ret := m.ctrl.Call(m, "IconName")
	ret0, _ := ret[0].(string)
	return ret0
}

// IconName indicates an expected call of IconName
func (mr *MockItemMockRecorder) IconName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconName", reflect.TypeOf((*MockItem)(nil).IconName))
}
