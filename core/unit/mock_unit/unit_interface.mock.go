// Code generated by MockGen. DO NOT EDIT.
// Source: ./unit_interface.go

// Package mock_unit is a generated GoMock package.
package mock_unit

import (
	gomock "github.com/golang/mock/gomock"
	geom "github.com/xosmig/roguelike/core/geom"
	objects "github.com/xosmig/roguelike/core/objects"
	unit "github.com/xosmig/roguelike/core/unit"
	reflect "reflect"
)

// MockUnit is a mock of Unit interface
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// Response mocks base method
func (m *MockUnit) Response(other objects.GameObject) {
	m.ctrl.Call(m, "Response", other)
}

// Response indicates an expected call of Response
func (mr *MockUnitMockRecorder) Response(other interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockUnit)(nil).Response), other)
}

// ModelName mocks base method
func (m *MockUnit) ModelName() string {
	ret := m.ctrl.Call(m, "ModelName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelName indicates an expected call of ModelName
func (mr *MockUnitMockRecorder) ModelName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelName", reflect.TypeOf((*MockUnit)(nil).ModelName))
}

// SetPosition mocks base method
func (m *MockUnit) SetPosition(pos geom.Location) {
	m.ctrl.Call(m, "SetPosition", pos)
}

// SetPosition indicates an expected call of SetPosition
func (mr *MockUnitMockRecorder) SetPosition(pos interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockUnit)(nil).SetPosition), pos)
}

// GetPosition mocks base method
func (m *MockUnit) GetPosition() geom.Location {
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(geom.Location)
	return ret0
}

// GetPosition indicates an expected call of GetPosition
func (mr *MockUnitMockRecorder) GetPosition() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockUnit)(nil).GetPosition))
}

// Interact mocks base method
func (m *MockUnit) Interact(other objects.GameObject) {
	m.ctrl.Call(m, "Interact", other)
}

// Interact indicates an expected call of Interact
func (mr *MockUnitMockRecorder) Interact(other interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interact", reflect.TypeOf((*MockUnit)(nil).Interact), other)
}

// RecvDamage mocks base method
func (m *MockUnit) RecvDamage(dmg int, from unit.Unit) {
	m.ctrl.Call(m, "RecvDamage", dmg, from)
}

// RecvDamage indicates an expected call of RecvDamage
func (mr *MockUnitMockRecorder) RecvDamage(dmg, from interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvDamage", reflect.TypeOf((*MockUnit)(nil).RecvDamage), dmg, from)
}

// GetTeam mocks base method
func (m *MockUnit) GetTeam() int {
	ret := m.ctrl.Call(m, "GetTeam")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTeam indicates an expected call of GetTeam
func (mr *MockUnitMockRecorder) GetTeam() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockUnit)(nil).GetTeam))
}

// GetHP mocks base method
func (m *MockUnit) GetHP() int {
	ret := m.ctrl.Call(m, "GetHP")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetHP indicates an expected call of GetHP
func (mr *MockUnitMockRecorder) GetHP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHP", reflect.TypeOf((*MockUnit)(nil).GetHP))
}

// SetHP mocks base method
func (m *MockUnit) SetHP(hp int) {
	m.ctrl.Call(m, "SetHP", hp)
}

// SetHP indicates an expected call of SetHP
func (mr *MockUnitMockRecorder) SetHP(hp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHP", reflect.TypeOf((*MockUnit)(nil).SetHP), hp)
}

// GetMaxHP mocks base method
func (m *MockUnit) GetMaxHP() int {
	ret := m.ctrl.Call(m, "GetMaxHP")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxHP indicates an expected call of GetMaxHP
func (mr *MockUnitMockRecorder) GetMaxHP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxHP", reflect.TypeOf((*MockUnit)(nil).GetMaxHP))
}

// SetMaxHP mocks base method
func (m *MockUnit) SetMaxHP(hp int) {
	m.ctrl.Call(m, "SetMaxHP", hp)
}

// SetMaxHP indicates an expected call of SetMaxHP
func (mr *MockUnitMockRecorder) SetMaxHP(hp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxHP", reflect.TypeOf((*MockUnit)(nil).SetMaxHP), hp)
}
